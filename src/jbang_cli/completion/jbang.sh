#!/usr/bin/env bash
#
# jbang Bash Completion
# =======================
#
# Bash completion support for the `jbang` command,
# generated by [picocli](https://picocli.info/) version 4.7.5.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `jbang [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'jbang (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# compReplyArray generates a list of completion suggestions based on an array, ensuring all values are properly escaped.
#
# compReplyArray takes a single parameter: the array of options to be displayed
#
# The output is echoed to std_out, one option per line.
#
# Example usage:
# local options=("foo", "bar", "baz")
# local IFS=$'\n'
# COMPREPLY=($(compReplyArray "${options[@]}"))
function compReplyArray() {
  declare -a options
  options=("$@")
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local i
  local quoted
  local optionList=()

  for (( i=0; i<${#options[@]}; i++ )); do
    # Double escape, since we want escaped values, but compgen -W expands the argument
    printf -v quoted %q "${options[i]}"
    quoted=\'${quoted//\'/\'\\\'\'}\'

    optionList[i]=$quoted
  done

  # We also have to add another round of escaping to $curr_word.
  curr_word=${curr_word//\\/\\\\}
  curr_word=${curr_word//\'/\\\'}

  # Actually generate completions.
  local IFS=$'\n'
  echo -e "$(compgen -W "${optionList[*]}" -- "$curr_word")"
}

# Bash completion entry point function.
# _complete_jbang finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_jbang() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} run" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} build" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} edit" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} init" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} alias" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} template" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} catalog" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} trust" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cache" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} completion" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} jdk" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} version" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} wrapper" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} info" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} app" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} export" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config" ];    then _picocli_jbang; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} alias add" ];    then _picocli_jbang_alias; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} alias list" ];    then _picocli_jbang_alias; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} alias remove" ];    then _picocli_jbang_alias; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} template add" ];    then _picocli_jbang_template; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} template list" ];    then _picocli_jbang_template; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} template remove" ];    then _picocli_jbang_template; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} catalog add" ];    then _picocli_jbang_catalog; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} catalog update" ];    then _picocli_jbang_catalog; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} catalog list" ];    then _picocli_jbang_catalog; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} catalog remove" ];    then _picocli_jbang_catalog; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} trust add" ];    then _picocli_jbang_trust; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} trust list" ];    then _picocli_jbang_trust; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} trust remove" ];    then _picocli_jbang_trust; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} cache clear" ];    then _picocli_jbang_cache; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} jdk default" ];    then _picocli_jbang_jdk; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} jdk home" ];    then _picocli_jbang_jdk; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} jdk install" ];    then _picocli_jbang_jdk; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} jdk java-env" ];    then _picocli_jbang_jdk; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} jdk list" ];    then _picocli_jbang_jdk; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} jdk uninstall" ];    then _picocli_jbang_jdk; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} wrapper install" ];    then _picocli_jbang_wrapper; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} info tools" ];    then _picocli_jbang_info; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} info classpath" ];    then _picocli_jbang_info; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} info jar" ];    then _picocli_jbang_info; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} app install" ];    then _picocli_jbang_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} app list" ];    then _picocli_jbang_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} app uninstall" ];    then _picocli_jbang_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} app setup" ];    then _picocli_jbang_app; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} export portable" ];    then _picocli_jbang_export; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} export local" ];    then _picocli_jbang_export; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} export mavenrepo" ];    then _picocli_jbang_export; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} export native" ];    then _picocli_jbang_export; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} export fatjar" ];    then _picocli_jbang_export; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} export jlink" ];    then _picocli_jbang_export; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config get" ];    then _picocli_jbang_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config set" ];    then _picocli_jbang_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config unset" ];    then _picocli_jbang_config; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config list" ];    then _picocli_jbang_config; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(run)
  local cmds1=(build)
  local cmds2=(edit)
  local cmds3=(init)
  local cmds4=(alias)
  local cmds5=(template)
  local cmds6=(catalog)
  local cmds7=(trust)
  local cmds8=(cache)
  local cmds9=(completion)
  local cmds10=(jdk)
  local cmds11=(version)
  local cmds12=(wrapper)
  local cmds13=(info)
  local cmds14=(app)
  local cmds15=(export)
  local cmds16=(config)
  local cmds17=(alias add)
  local cmds18=(alias list)
  local cmds19=(alias remove)
  local cmds20=(template add)
  local cmds21=(template list)
  local cmds22=(template remove)
  local cmds23=(catalog add)
  local cmds24=(catalog update)
  local cmds25=(catalog list)
  local cmds26=(catalog remove)
  local cmds27=(trust add)
  local cmds28=(trust list)
  local cmds29=(trust remove)
  local cmds30=(cache clear)
  local cmds31=(jdk default)
  local cmds32=(jdk home)
  local cmds33=(jdk install)
  local cmds34=(jdk java-env)
  local cmds35=(jdk list)
  local cmds36=(jdk uninstall)
  local cmds37=(wrapper install)
  local cmds38=(info tools)
  local cmds39=(info classpath)
  local cmds40=(info jar)
  local cmds41=(app install)
  local cmds42=(app list)
  local cmds43=(app uninstall)
  local cmds44=(app setup)
  local cmds45=(export portable)
  local cmds46=(export local)
  local cmds47=(export mavenrepo)
  local cmds48=(export native)
  local cmds49=(export fatjar)
  local cmds50=(export jlink)
  local cmds51=(config get)
  local cmds52=(config set)
  local cmds53=(config unset)
  local cmds54=(config list)

  if CompWordsContainsArray "${cmds54[@]}"; then _picocli_jbang_config_list; return $?; fi
  if CompWordsContainsArray "${cmds53[@]}"; then _picocli_jbang_config_unset; return $?; fi
  if CompWordsContainsArray "${cmds52[@]}"; then _picocli_jbang_config_set; return $?; fi
  if CompWordsContainsArray "${cmds51[@]}"; then _picocli_jbang_config_get; return $?; fi
  if CompWordsContainsArray "${cmds50[@]}"; then _picocli_jbang_export_jlink; return $?; fi
  if CompWordsContainsArray "${cmds49[@]}"; then _picocli_jbang_export_fatjar; return $?; fi
  if CompWordsContainsArray "${cmds48[@]}"; then _picocli_jbang_export_native; return $?; fi
  if CompWordsContainsArray "${cmds47[@]}"; then _picocli_jbang_export_mavenrepo; return $?; fi
  if CompWordsContainsArray "${cmds46[@]}"; then _picocli_jbang_export_local; return $?; fi
  if CompWordsContainsArray "${cmds45[@]}"; then _picocli_jbang_export_portable; return $?; fi
  if CompWordsContainsArray "${cmds44[@]}"; then _picocli_jbang_app_setup; return $?; fi
  if CompWordsContainsArray "${cmds43[@]}"; then _picocli_jbang_app_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds42[@]}"; then _picocli_jbang_app_list; return $?; fi
  if CompWordsContainsArray "${cmds41[@]}"; then _picocli_jbang_app_install; return $?; fi
  if CompWordsContainsArray "${cmds40[@]}"; then _picocli_jbang_info_jar; return $?; fi
  if CompWordsContainsArray "${cmds39[@]}"; then _picocli_jbang_info_classpath; return $?; fi
  if CompWordsContainsArray "${cmds38[@]}"; then _picocli_jbang_info_tools; return $?; fi
  if CompWordsContainsArray "${cmds37[@]}"; then _picocli_jbang_wrapper_install; return $?; fi
  if CompWordsContainsArray "${cmds36[@]}"; then _picocli_jbang_jdk_uninstall; return $?; fi
  if CompWordsContainsArray "${cmds35[@]}"; then _picocli_jbang_jdk_list; return $?; fi
  if CompWordsContainsArray "${cmds34[@]}"; then _picocli_jbang_jdk_javaenv; return $?; fi
  if CompWordsContainsArray "${cmds33[@]}"; then _picocli_jbang_jdk_install; return $?; fi
  if CompWordsContainsArray "${cmds32[@]}"; then _picocli_jbang_jdk_home; return $?; fi
  if CompWordsContainsArray "${cmds31[@]}"; then _picocli_jbang_jdk_default; return $?; fi
  if CompWordsContainsArray "${cmds30[@]}"; then _picocli_jbang_cache_clear; return $?; fi
  if CompWordsContainsArray "${cmds29[@]}"; then _picocli_jbang_trust_remove; return $?; fi
  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_jbang_trust_list; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_jbang_trust_add; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_jbang_catalog_remove; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_jbang_catalog_list; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_jbang_catalog_update; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_jbang_catalog_add; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_jbang_template_remove; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_jbang_template_list; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_jbang_template_add; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_jbang_alias_remove; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_jbang_alias_list; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_jbang_alias_add; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_jbang_config; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_jbang_export; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_jbang_app; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_jbang_info; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_jbang_wrapper; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_jbang_version; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_jbang_jdk; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_jbang_completion; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_jbang_cache; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_jbang_trust; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_jbang_catalog; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_jbang_template; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_jbang_alias; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_jbang_init; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_jbang_edit; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_jbang_build; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_jbang_run; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_jbang; return $?;
}

# Generates completions for the options and subcommands of the `jbang` command.
function _picocli_jbang() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="run build edit init alias template catalog trust cache completion jdk version wrapper info app export config"
  local flag_opts="-h --help --insecure -V --version --verbose --quiet -o --offline --fresh --preview"
  local arg_opts="--config"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `run` subcommand.
function _picocli_jbang_run() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh -n --native --enable-preview --enableassertions --ea --enablesystemassertions --esa --cds -i --interactive --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -m --main --module -C --compile-option --manifest -j --java -D --deps --repos --cp --class-path -N --native-option --build-dir -R --runtime-option --java-options --jfr -d --debug --javaagent -c --code"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -m|--main)
      return
      ;;
    --module)
      return
      ;;
    -C|--compile-option)
      return
      ;;
    --manifest)
      return
      ;;
    -j|--java)
      return
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    -N|--native-option)
      return
      ;;
    --build-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -R|--runtime-option|--java-options)
      return
      ;;
    --jfr)
      return
      ;;
    -d|--debug)
      return
      ;;
    --javaagent)
      return
      ;;
    -c|--code)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `build` subcommand.
function _picocli_jbang_build() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh -n --native --enable-preview --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -m --main --module -C --compile-option --manifest -j --java -D --deps --repos --cp --class-path -N --native-option --build-dir"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -m|--main)
      return
      ;;
    --module)
      return
      ;;
    -C|--compile-option)
      return
      ;;
    --manifest)
      return
      ;;
    -j|--java)
      return
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    -N|--native-option)
      return
      ;;
    --build-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `edit` subcommand.
function _picocli_jbang_edit() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh --live --no-open -b --sandbox --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -D --deps --repos --cp --class-path --open"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    --open)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `init` subcommand.
function _picocli_jbang_init() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --force --edit --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --template -t -D --deps"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --template|-t)
      return
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `alias` subcommand.
function _picocli_jbang_alias() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="add list remove"
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `template` subcommand.
function _picocli_jbang_template() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="add list remove"
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `catalog` subcommand.
function _picocli_jbang_catalog() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="add update list remove"
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `trust` subcommand.
function _picocli_jbang_trust() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="add list remove"
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `cache` subcommand.
function _picocli_jbang_cache() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="clear"
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `completion` subcommand.
function _picocli_jbang_completion() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --verbose --quiet -o --offline --fresh"
  local arg_opts="--config"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `jdk` subcommand.
function _picocli_jbang_jdk() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="default home install java-env list uninstall"
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `version` subcommand.
function _picocli_jbang_version() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --check --update --verbose --quiet -o --offline --fresh"
  local arg_opts="--config"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `wrapper` subcommand.
function _picocli_jbang_wrapper() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="install"
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `info` subcommand.
function _picocli_jbang_info() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="tools classpath jar"
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `app` subcommand.
function _picocli_jbang_app() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="install list uninstall setup"
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `export` subcommand.
function _picocli_jbang_export() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="portable local mavenrepo native fatjar jlink"
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_jbang_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="get set unset list"
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_jbang_alias_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --jsh -n --native --enableassertions --ea --enablesystemassertions --esa --cds -i --interactive --force --enable-preview --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f -s --sources --files --source-type --catalog -m --main --module -C --compile-option --manifest -j --java -D --deps --repos --cp --class-path -N --native-option -R --runtime-option --java-options --jfr -d --debug --javaagent --description --name"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -m|--main)
      return
      ;;
    --module)
      return
      ;;
    -C|--compile-option)
      return
      ;;
    --manifest)
      return
      ;;
    -j|--java)
      return
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    -N|--native-option)
      return
      ;;
    -R|--runtime-option|--java-options)
      return
      ;;
    --jfr)
      return
      ;;
    -d|--debug)
      return
      ;;
    --javaagent)
      return
      ;;
    --description)
      return
      ;;
    --name)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_jbang_alias_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --show-origin --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f --format"
  local format_option_args=("text" "json") # --format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --format)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${format_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove` subcommand.
function _picocli_jbang_alias_remove() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_jbang_template_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --force --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f --description -d --name --property -P"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --description|-d)
      return
      ;;
    --name)
      return
      ;;
    --property|-P)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_jbang_template_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --show-origin --show-files --show-properties --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f --format"
  local format_option_args=("text" "json") # --format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --format)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${format_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove` subcommand.
function _picocli_jbang_template_remove() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_jbang_catalog_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --force --import --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f --description -d --name"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --description|-d)
      return
      ;;
    --name)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_jbang_catalog_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_jbang_catalog_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --show-origin --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f --format"
  local format_option_args=("text" "json") # --format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --format)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${format_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove` subcommand.
function _picocli_jbang_catalog_remove() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `add` subcommand.
function _picocli_jbang_trust_add() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_jbang_trust_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts="--format"
  local arg0_option_args=("text" "json") # --format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --format)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${arg0_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `remove` subcommand.
function _picocli_jbang_trust_remove() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `clear` subcommand.
function _picocli_jbang_cache_clear() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="--url --jar --deps --jdk --kotlinc --groovyc --project --script --stdin --all --verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `default` subcommand.
function _picocli_jbang_jdk_default() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `home` subcommand.
function _picocli_jbang_jdk_home() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_jbang_jdk_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="--force -f --verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `java-env` subcommand.
function _picocli_jbang_jdk_javaenv() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_jbang_jdk_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--available --show-details --verbose --quiet -o --offline --fresh"
  local arg_opts="--format"
  local arg2_option_args=("text" "json") # --format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --format)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${arg2_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_jbang_jdk_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="--verbose --quiet -o --offline --fresh"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_jbang_wrapper_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-f --force --verbose --quiet -o --offline --fresh"
  local arg_opts="-d --dir"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    -d|--dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `tools` subcommand.
function _picocli_jbang_info_tools() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -D --deps --repos --cp --class-path --build-dir --module --select"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    --build-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --module)
      return
      ;;
    --select)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `classpath` subcommand.
function _picocli_jbang_info_classpath() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh --deps-only --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -D --deps --repos --cp --class-path --build-dir --module"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    --build-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --module)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `jar` subcommand.
function _picocli_jbang_info_jar() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -D --deps --repos --cp --class-path --build-dir --module"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    --build-dir)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --module)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `install` subcommand.
function _picocli_jbang_app_install() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --force --jsh -n --native --enableassertions --ea --enablesystemassertions --esa --cds -i --interactive --enable-preview --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --name -s --sources --files --source-type --catalog -m --main --module -C --compile-option --manifest -j --java -D --deps --repos --cp --class-path -N --native-option -R --runtime-option --java-options --jfr -d --debug --javaagent"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --name)
      return
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -m|--main)
      return
      ;;
    --module)
      return
      ;;
    -C|--compile-option)
      return
      ;;
    --manifest)
      return
      ;;
    -j|--java)
      return
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    -N|--native-option)
      return
      ;;
    -R|--runtime-option|--java-options)
      return
      ;;
    --jfr)
      return
      ;;
    -d|--debug)
      return
      ;;
    --javaagent)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_jbang_app_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --format"
  local format_option_args=("text" "json") # --format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --format)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${format_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `uninstall` subcommand.
function _picocli_jbang_app_uninstall() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --verbose --quiet -o --offline --fresh"
  local arg_opts="--config"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `setup` subcommand.
function _picocli_jbang_app_setup() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --java --force --verbose --quiet -o --offline --fresh"
  local arg_opts="--config"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `portable` subcommand.
function _picocli_jbang_export_portable() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh --force --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -m --main --module -C --compile-option --manifest -j --java -D --deps --repos --cp --class-path -O --output"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -m|--main)
      return
      ;;
    --module)
      return
      ;;
    -C|--compile-option)
      return
      ;;
    --manifest)
      return
      ;;
    -j|--java)
      return
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    -O|--output)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `local` subcommand.
function _picocli_jbang_export_local() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh --force --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -m --main --module -C --compile-option --manifest -j --java -D --deps --repos --cp --class-path -O --output"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -m|--main)
      return
      ;;
    --module)
      return
      ;;
    -C|--compile-option)
      return
      ;;
    --manifest)
      return
      ;;
    -j|--java)
      return
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    -O|--output)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `mavenrepo` subcommand.
function _picocli_jbang_export_mavenrepo() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh --force --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -m --main --module -C --compile-option --manifest -j --java -D --deps --repos --cp --class-path -O --output --group -g --artifact -a --version -v"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -m|--main)
      return
      ;;
    --module)
      return
      ;;
    -C|--compile-option)
      return
      ;;
    --manifest)
      return
      ;;
    -j|--java)
      return
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    -O|--output)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --group|-g)
      return
      ;;
    --artifact|-a)
      return
      ;;
    --version|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `native` subcommand.
function _picocli_jbang_export_native() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh --force --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -m --main --module -C --compile-option --manifest -j --java -D --deps --repos --cp --class-path -O --output"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -m|--main)
      return
      ;;
    --module)
      return
      ;;
    -C|--compile-option)
      return
      ;;
    --manifest)
      return
      ;;
    -j|--java)
      return
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    -O|--output)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `fatjar` subcommand.
function _picocli_jbang_export_fatjar() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh --force --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -m --main --module -C --compile-option --manifest -j --java -D --deps --repos --cp --class-path -O --output"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -m|--main)
      return
      ;;
    --module)
      return
      ;;
    -C|--compile-option)
      return
      ;;
    --manifest)
      return
      ;;
    -j|--java)
      return
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    -O|--output)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `jlink` subcommand.
function _picocli_jbang_export_jlink() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --jsh --force --verbose --quiet -o --offline --fresh"
  local arg_opts="--config -s --sources --files --source-type --catalog -m --main --module -C --compile-option --manifest -j --java -D --deps --repos --cp --class-path -O --output"
  local forceType_option_args=("java" "jshell" "kotlin" "groovy" "markdown") # --source-type values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -s|--sources)
      return
      ;;
    --files)
      return
      ;;
    --source-type)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${forceType_option_args[@]}" ) )
      return $?
      ;;
    --catalog)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    -m|--main)
      return
      ;;
    --module)
      return
      ;;
    -C|--compile-option)
      return
      ;;
    --manifest)
      return
      ;;
    -j|--java)
      return
      ;;
    -D)
      return
      ;;
    --deps)
      return
      ;;
    --repos)
      return
      ;;
    --cp|--class-path)
      return
      ;;
    -O|--output)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_jbang_config_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `set` subcommand.
function _picocli_jbang_config_set() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `unset` subcommand.
function _picocli_jbang_config_unset() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `list` subcommand.
function _picocli_jbang_config_list() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help --insecure --global -g --show-origin --show-available --verbose --quiet -o --offline --fresh"
  local arg_opts="--config --file -f --format"
  local format_option_args=("text" "json") # --format values

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --file|-f)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --format)
      local IFS=$'\n'
      COMPREPLY=( $( compReplyArray "${format_option_args[@]}" ) )
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    local IFS=$'\n'
    COMPREPLY=( $(compgen -W "${commands// /$'\n'}${IFS}${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `jbang`, `jbang.sh`, and `jbang.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_jbang` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_jbang -o default jbang jbang.sh jbang.bash
