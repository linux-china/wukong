use clap::{Arg, Command};
use crate::jenv_cli::{add_command, commands_command, completion_command, global_command, local_command, remove_command, shell_command, version_command, versions_command, which_command};

mod jenv_cli;
mod foojay;
mod common;

pub const VERSION: &str = "0.1.0";

fn main() {
    let args = std::env::args().collect::<Vec<String>>();
    // jenv init scripts
    if args.len() >= 2 && args[1] == "init" {
        jenv_cli::init();
        return;
    }
    let app = build_jenv_app();
    let matches = app.get_matches();
    if let Some((command, command_matches)) = matches.subcommand() {
        match command {
            "commands" => commands_command(),
            "local" => local_command(command_matches),
            "global" => global_command(command_matches),
            "shell" => shell_command(command_matches),
            "version" => version_command(),
            "versions" => versions_command(),
            "which" => which_command(command_matches),
            "add" => add_command(command_matches),
            "remove" => remove_command(command_matches),
            "completion" => completion_command(command_matches),
            &_ => println!("Unknown command"),
        }
    }
}

pub fn build_jenv_app() -> Command {
    let local_command = Command::new("local")
        .about("Set local Java version for the current working directory")
        .arg(
            Arg::new("version")
                .help("The java version")
                .index(1)
                .required(false)
        );
    let global_command = Command::new("global")
        .about("Set or show the global Java version")
        .arg(
            Arg::new("version")
                .help("The java version")
                .index(1)
                .required(false)
        );
    let shell_command = Command::new("shell")
        .about("Set or show the shell-specific Java version");

    let versions_command = Command::new("versions")
        .about("List all Java versions available to jenv");

    let version_command = Command::new("version")
        .about("Show the current Java version and its origin");
    let which_command = Command::new("which")
        .about("Display the full path to an executable")
        .arg(
            Arg::new("command")
                .help("java command name")
                .index(1)
                .required(false)
        );
    let whence_command = Command::new("whence")
        .about("Display the full path to an executable")
        .arg(
            Arg::new("command")
                .help("java command name")
                .index(1)
                .required(false)
        );
    let add_command = Command::new("add")
        .about("Add JDK into jenv. A alias name will be generated by parsing \"java -version\"")
        .arg(
            Arg::new("versionOrPath")
                .help("The java version or java home path")
                .index(1)
                .required(false)
        );
    let remove_command = Command::new("remove")
        .about("Remove JDK installations")
        .arg(
            Arg::new("version")
                .help("The java version")
                .index(1)
                .required(false)
        );
    let commands_command = Command::new("commands")
        .about("List all available jenv commands");
    let completion_command = Command::new("completion")
        .about("Output auto-completion script for bash/zsh/fish. Usage: source <(jenv completion zsh)")
        .arg(
            Arg::new("shell")
                .help("The shell name")
                .index(1)
                .required(true)
                .value_parser(["bash", "zsh", "fish"])
        );
    Command::new("jenv")
        .version(VERSION)
        .about("sdk - Manage your Java environment")
        .subcommand(commands_command)
        .subcommand(local_command)
        .subcommand(global_command)
        .subcommand(shell_command)
        .subcommand(version_command)
        .subcommand(versions_command)
        .subcommand(which_command)
        .subcommand(add_command)
        .subcommand(remove_command)
        .subcommand(completion_command)
}
